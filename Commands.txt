
1. Робота з бренчами
- створити бренчу "architecture" з "master", переключитися в неї
git checkout -b architecture

- створити структуру в файловій системі (контент файлів довільний):
assets/
uploads/
index.html

mkdir assets
mkdir uploads
touch index.html

- закомітити
git add .
git commit -m "Created folders assets/ and uploads/, added file index.html"

- додати файли ``assets/all.js`` та ``assets/css.js``
cd assets
touch all.js
touch css.js

- закомітити, злити в репозиторій
git add .
git commit -m "Added files all.js and css.js in folder assets/"
git remote add origin 
git push -u origin architecture

- зробити щоб ігнорилися всі файли з папки uploads/ (сама папка має бути в репозиторії)
touch .gitignore
echo "uploads/*" .gitignore
git add .
git commit -m "Added .gitignore file, which ignore all files from folder upload/"

- змерджити зміни в master, видалити бренч
git checkout -b master
git merge architecture
git push -u origin master
git branch -D architecture

2. Rebase
- відколоти бренч
git branch newbr

- зробити декілька комітів в master
git checkout master
echo "<h1>Hellow world</h1>">index.html
git add index.html
git commit -m "Created new line in index.html"

зробити rebase в бренчі
git checkout new
git rebase master

- зробити коміти в свою бренчу
echo "<h2>Second line</h2>" >> index.html
git add index.html
git commit -m "New second line added to index.htm"
mkdir new
cd new
touch new.txt
git add new.txt
git commit -m "Added new.txt in folder new/"

- зробити merge в master
git checkout master
git merge newbr
git push

- видалити бренч
git branch -d newbr


3. Tag
- зробити декілька комітів в master
echo "<h1>version v1.0</h1>" > index.html
git add index.html
git commit -m "Adding new text to index.html"
echo "<h1>v1.0</h1>" > index.html
git add index.html
git commit -m "Changing text in index.html 'v1.0'"
git push

- створити мітку
git tag -a "ver1.0" -m "Initial valid version"

- залити мітку в репозиторій
git push origin ver1.0


4. -—Submodule (advanced level)—-
додати любий submodule
git submodule add https://github.com/paypal/bootstrap-accessibility-plugin.git
git add .
git commit -m "submodule is added"
злити зміни в master
git push


5. Git Pages (advanced level)
-створити бренч "gh-pages", вести роботу в ньому
git branch gh-pages 
git checkout gh-pages

-додати файл index.html з любим контентом (не пустий файл)
echo "<h1>Web interface for repository</h1>" > index.html


-коміт & пуш
git add .
$ git commit -m "Adding text to index.html"
git push -u origin gh-pages

-перейти по лінку: http://<username>.github.io/<repository-name>
https://AleksK88/github.io/hw-vcs/
not work!!!
-перевірити чи по лінку синхронізовані зміни з репозиторієм
OK
-зробити зміни, commit & push, перевирити чи з'явилися зміни
OK
-додатково читати: https://pages.github.com/
OK

6. — Conflict (advanced level) -—
в master зробити зміни в file.txt
touch file.txt
echo "123" > file.txt
git add .
git commit -m "added file.txt with text 123"

в branch зробити зміни в file.txt (несумісні з попередніми - наприклад повна заміна контенту файлу)
git checkout gh-pages
touch file.txt
echo "hi all" > file.txt
git add .
git commit -m "chenge first line to hi all"

змерджити бренч в мастер, отримати конфлікт
$ git merge master
Auto-merging file.txt
CONFLICT (add/add): Merge conflict in file.txt
Automatic merge failed; fix conflicts and then commit the result.

спробувати використати git merge --abort
CONFLICT (add/add): Merge conflict in file.txt
Automatic merge failed; fix conflicts and then commit the result.

порезолвити конфлікт
echo "" > file.txt
git add .
git commit -m "delete text in file.txt"

зробити успішний мердж
git merge master
Already up to date.